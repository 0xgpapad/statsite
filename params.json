{"name":"Statsite","tagline":"A C implementation of statsd","body":"Statsite [![Build Status](https://travis-ci.org/armon/statsite.png)](https://travis-ci.org/armon/statsite)\r\n========\r\n\r\nStatsite is a metrics aggregation server. Statsite is based heavily\r\non Etsy's StatsD <https://github.com/etsy/statsd>, and is wire compatible.\r\n\r\nFeatures\r\n--------\r\n\r\n* Multiple metric types\r\n  - Key / Value\r\n  - Gauges\r\n  - Counters\r\n  - Timers\r\n  - Sets\r\n* Efficient summary metrics for timer data:\r\n  - Mean\r\n  - Min/Max\r\n  - Standard deviation\r\n  - Median, Percentile 95, Percentile 99\r\n  - Histograms\r\n* Dynamic set implementation:\r\n  - Exactly counts for small sets\r\n  - HyperLogLog for large sets\r\n* Included sinks:\r\n  - Graphite\r\n  - InfluxDB\r\n  - Ganglia\r\n  - Liberato\r\n* Binary protocol\r\n* TCP, UDP, and STDIN\r\n* Fast\r\n\r\n\r\nArchitecture\r\n-------------\r\n\r\nStatsite is designed to be both highly performant,\r\nand very flexible. To achieve this, it implements the stats\r\ncollection and aggregation in pure C, using libev to be\r\nextremely fast. This allows it to handle hundreds of connections,\r\nand millions of metrics. After each flush interval expires,\r\nstatsite performs a fork/exec to start a new stream handler\r\ninvoking a specified application. Statsite then streams the\r\naggregated metrics over stdin to the application, which is\r\nfree to handle the metrics as it sees fit.\r\n\r\nThis allows statsite to aggregate metrics and then ship metrics\r\nto any number of sinks (Graphite, SQL databases, etc). There\r\nis an included Python script that ships metrics to graphite.\r\n\r\nStatsite tries to minimize memory usage by not\r\nstoring all the metrics that are received. Counter values are\r\naggregated as they are received, and timer values are stored\r\nand aggregated using the Cormode-Muthurkrishnan algorithm from\r\n\"Effective Computation of Biased Quantiles over Data Streams\".\r\nThis means that the percentile values are not perfectly accurate,\r\nand are subject to a specifiable error epsilon. This allows us to\r\nstore only a fraction of the samples.\r\n\r\nHistograms can also be optionally maintained for timer values.\r\nThe minimum and maximum values along with the bin widths must\r\nbe specified in advance, and as samples are recieved the bins\r\nare updated. Statsite supports multiple histograms configurations,\r\nand uses a longest-prefix match policy.\r\n\r\nHandling of Sets in statsite depend on the number of\r\nentries received. For small cardinalities (<64 currently),\r\nstatsite will count exactly the number of unique items. For\r\nlarger sets, it switches to using a HyperLogLog to estimate\r\ncardinalities with high accuracy and low space utilization.\r\nThis allows statsite to estimate huge set sizes without\r\nretaining all the values. The parameters of the HyperLogLog\r\ncan be tuned to provide greater accuracy at the cost of memory.\r\n\r\nThe HyperLogLog is based on the Google paper, \"HyperLogLog in\r\nPractice: Algorithmic Engineering of a State of The Art Cardinality\r\nEstimation Algorithm\".\r\n\r\nInstall\r\n-------\r\n\r\nDownload and build from source. This requires `scons` to be available,\r\navailable usually through a system package manager. Steps:\r\n\r\n    $ git clone https://github.com/armon/statsite.git\r\n    $ cd statsite\r\n    $ pip install SCons  # Uses the Scons build system, may not be necessary\r\n    $ make\r\n    $ ./statsite\r\n\r\nBuilding the test code may generate errors if libcheck is not available.\r\nTo build the test code successfully, do the following::\r\n\r\n    $ cd deps/check-0.9.8/\r\n    $ ./configure\r\n    $ make\r\n    # make install\r\n    # ldconfig (necessary on some Linux distros)\r\n    $ cd ../../\r\n    $ make test\r\n\r\nAt this point, the test code should build successfully.\r\n\r\nUsage\r\n-----\r\n\r\nStatsite is configured using a simple INI file.\r\nHere is an example configuration file::\r\n\r\n    [statsite]\r\n    port = 8125\r\n    udp_port = 8125\r\n    log_level = INFO\r\n    flush_interval = 10\r\n    timer_eps = 0.01\r\n    set_eps = 0.02\r\n    stream_cmd = python sinks/graphite.py localhost 2003\r\n\r\n    [histogram_api]\r\n    prefix=api\r\n    min=0\r\n    max=100\r\n    width=5\r\n\r\n    [histogram_default]\r\n    prefix=\r\n    min=0\r\n    max=200\r\n    width=20\r\n\r\nThen run statsite, pointing it to that file::\r\n\r\n    statsite -f /etc/statsite.conf\r\n\r\nA full list of configuration options is below.\r\n\r\nConfiguration Options\r\n---------------------\r\n\r\nEach statsite configuration option is documented below. Statsite configuration\r\noptions must exist in the `statsite` section of the INI file:\r\n\r\n * tcp\\_port : Integer, sets the TCP port to listen on. Default 8125. 0 to disable.\r\n\r\n * port: Same as above. For compatibility.\r\n\r\n * udp\\_port : Integer, sets the UDP port. Default 8125. 0 to disable.\r\n\r\n * bind\\_address : The address to bind on. Defaults to 0.0.0.0\r\n\r\n * parse\\_stdin: Enables parsing stdin as an input stream. Defaults to 0.\r\n\r\n * log\\_level : The logging level that statsite should use. One of:\r\n    DEBUG, INFO, WARN, ERROR, or CRITICAL. All logs go to syslog,\r\n    and stderr if that is a TTY. Default is DEBUG.\r\n\r\n * flush\\_interval : How often the metrics should be flushed to the\r\n    sink in seconds. Defaults to 10 seconds.\r\n\r\n * timer\\_eps : The upper bound on error for timer estimates. Defaults\r\n   to 1%. Decreasing this value causes more memory utilization per timer.\r\n\r\n * set\\_eps : The upper bound on error for unique set estimates. Defaults\r\n   to 2%. Decreasing this value causes more memory utilization per set.\r\n\r\n * stream\\_cmd : This is the command that statsite invokes every\r\n  `flush_interval` seconds to handle the metrics. It can be any executable.\r\n  It should read inputs over stdin and exit with status code 0 on success.\r\n\r\n * input\\_counter : If set, statsite will count how many commands it received\r\n  in the flush interval, and the count will be emitted under this name. For\r\n  example if set to \"numStats\", then statsite will emit \"counter.numStats\" with\r\n  the number of samples it has received.\r\n\r\n * daemonize : Should statsite daemonize. Defaults to 0.\r\n\r\n * pid\\_file : When daemonizing, where to put the pid file. Defaults\r\n   to /var/run/statsite.pid\r\n\r\n * binary\\_stream : Should data be streamed to the stream\\_cmd in\r\n   binary form instead of ASCI form. Defaults to 0.\r\n\r\n * use\\_type\\_prefix : Should prefixes with message type be added to the messages.\r\n   Does not affect global\\_prefix. Defaults to 1.\r\n\r\n * global\\_prefix : Prefix that will be added to all messages.\r\n   Defaults to empty string.\r\n\r\n * kv\\_prefix, gauges\\_prefix, counts\\_prefix, sets\\_prefix, timers\\_prefix : prefix for\r\n   each message type. Defaults to respectively: \"kv.\", \"gauges.\", \"counts.\",\r\n   \"sets.\", \"timers.\". Values will be ignored if use_type_prefix set to 0.\r\n\r\nIn addition to global configurations, statsite supports histograms\r\nas well. Histograms are configured one per section, and the INI\r\nsection must start with the work `histogram`. These are the recognized\r\noptions:\r\n\r\n * prefix : This is the key prefix to match on. The longest matching prefix\r\n is used. If the prefix is blank, it is the default for all keys.\r\n\r\n * min : Floating value. The minimum bound on the histogram. Values below\r\n this go into a special bucket containing everything less than this value.\r\n\r\n * max: Floating value. The maximum bound on the histogram. Values above\r\n this go into a special bucket containing everything more than this value.\r\n\r\n * width : Floating value. The width of each bucket between the min and max.\r\n\r\nEach histogram section must specify all options to be valid.\r\n\r\n\r\nProtocol\r\n--------\r\n\r\nBy default, Statsite will listen for TCP and UDP connections. A message\r\nlooks like the following (where the flag is optional)::\r\n\r\n    key:value|type[|@flag]\r\n\r\nMessages must be terminated by newlines (`\\n`).\r\n\r\nCurrently supported message types:\r\n\r\n* `kv` - Simple Key/Value.\r\n* `g`  - Gauge, similar to `kv` but only the last value per key is retained\r\n* `ms` - Timer.\r\n* `c`  - Counter.\r\n* `s`  - Unique Set\r\n\r\nAfter the flush interval, the counters and timers of the same key are\r\naggregated and this is sent to the store.\r\n\r\nGauges also support \"delta\" updates, which are supported by prefixing the\r\nvalue with either a `+` or a `-`. This implies you can't explicitly set a gauge to a negative number without first setting it to zero.\r\n\r\nExamples:\r\n\r\nThe following is a simple key/value pair, in this case reporting how many\r\nqueries we've seen in the last second on MySQL::\r\n\r\n    mysql.queries:1381|kv\r\n\r\nThe following is a timer, timing the response speed of an API call::\r\n\r\n    api.session_created:114|ms\r\n\r\nThe next example is increments the \"rewards\" counter by 1::\r\n\r\n    rewards:1|c\r\n\r\nHere we initialize a gauge and then modify its value::\r\n\r\n    inventory:100|g\r\n    inventory:-5|g\r\n    inventory:+2|g\r\n\r\nSets count the unique items, so if statsite gets::\r\n\r\n    users:abe|s\r\n    users:zoe|s\r\n    users:bob|s\r\n    users:abe|s\r\n\r\nThen it will emit a count 3 for the number of uniques it has seen.\r\n\r\nWriting Statsite Sinks\r\n---------------------\r\n\r\nStatsite only ships with a graphite sink by default, but ANY executable\r\nor script  can be used as a sink. The sink should read its inputs from stdin, where\r\neach metric is in the form::\r\n\r\n    key|val|timestamp\\n\r\n\r\nEach metric is separated by a newline. The process should terminate with\r\nan exit code of 0 to indicate success.\r\n\r\nHere is an example of the simplest possible Python sink:\r\n\r\n    #!/usr/bin/env python\r\n    import sys\r\n\r\n    lines = sys.stdin.read().split(\"\\n\")\r\n    metrics = [l.split(\"|\") for l in lines]\r\n\r\n    for key, value, timestamp in metrics:\r\n        print key, value, timestamp\r\n\r\n\r\nBinary Protocol\r\n---------------\r\n\r\nIn addition to the statsd compatible ASCII protocol, statsite includes\r\na lightweight binary protocol. This can be used if you want to make use\r\nof special characters such as the colon, pipe character, or newlines. It\r\nis also marginally faster to process, and may provide 10-20% more throughput.\r\n\r\nEach command is sent to statsite over the same ports with this header:\r\n\r\n    <Magic Byte><Metric Type><Key Length>\r\n\r\nThen depending on the metric type, it is followed by either:\r\n\r\n    <Value><Key>\r\n    <Set Length><Key><Set Key>\r\n\r\nThe \"Magic Byte\" is the value 0xaa (170). This switches the internal\r\nprocessing from the ASCII mode to binary. The metric type is one of:\r\n\r\n* 0x1 : Key value / Gauge\r\n* 0x2 : Counter\r\n* 0x3 : Timer\r\n* 0x4 : Set\r\n* 0x5 : Gauge\r\n* 0x6 : Gauge Delta update\r\n\r\nThe key length is a 2 byte unsigned integer with the length of the\r\nkey, INCLUDING a NULL terminator. The key must include a null terminator,\r\nand it's length must include this.\r\n\r\nIf the metric type is K/V, Counter or Timer, then we expect a value and\r\na key. The value is a standard IEEE754 double value, which is 8 bytes in length.\r\nThe key is provided as a byte stream which is `Key Length` long,\r\nterminated by a NULL (0) byte.\r\n\r\nIf the metric type is Set, then we expect the length of a set key,\r\nprovided like the key length. The key should then be followed by\r\nan additional Set Key, which is `Set Length` long, terminated\r\nby a NULL (0) byte.\r\n\r\nAll of these values must be transmitted in Little Endian order.\r\n\r\nHere is an example of sending (\"Conns\", \"c\", 200) as hex:\r\n\r\n    0xaa 0x02 0x0600 0x0000000000006940 0x436f6e6e7300\r\n\r\n\r\n\r\nBinary Sink Protocol\r\n--------------------\r\n\r\nIt is also possible to have the data streamed to be represented\r\nin a binary format. Again, this is used if you want to use the reserved\r\ncharacters. It may also be faster.\r\n\r\nEach command is sent to the sink in the following manner:\r\n\r\n    <Timestamp><Metric Type><Value Type><Key Length><Value><Key>[<Count>]\r\n\r\nMost of these are the same as the binary protocol. There are a few.\r\nchanges however. The Timestamp is sent as an 8 byte unsigned integer,\r\nwhich is the current Unix timestamp. The Metric type is one of:\r\n\r\n* 0x1 : Key value\r\n* 0x2 : Counter\r\n* 0x3 : Timer\r\n* 0x4 : Set\r\n* 0x5 : Gauge\r\n\r\nThe value type is one of:\r\n\r\n* 0x0 : No type (Key/Value)\r\n* 0x1 : Sum (Also used for Sets)\r\n* 0x2 : Sum Squared\r\n* 0x3 : Mean\r\n* 0x4 : Count\r\n* 0x5 : Standard deviation\r\n* 0x6 : Minimum Value\r\n* 0x7 : Maximum Value\r\n* 0x8 : Histogram Floor Value\r\n* 0x9 : Histogram Bin Value\r\n* 0xa : Histogram Ceiling Value\r\n* 0x80 OR `percentile` :  If the type OR's with 128 (0x80), then it is a\r\n    percentile amount. The amount is OR'd with 0x80 to provide the type. For\r\n    example (0x80 | 0x32) = 0xb2 is the 50% percentile or medium. The 95th\r\n    percentile is (0x80 | 0xdf) = 0xdf.\r\n\r\nThe key length is a 2 byte unsigned integer representing the key length\r\nterminated by a NULL character. The Value is an IEEE754 double. Lastly,\r\nthe key is a NULL-terminated character stream.\r\n\r\nThe final `<Count>` field is only set for histogram values.\r\nIt is always provided as an unsigned 32 bit integer value. Histograms use the\r\nvalue field to specify the bin, and the count field for the entries in that\r\nbin. The special values for histogram floor and ceiling indicate values that\r\nwere outside the specified histogram range. For example, if the min value was\r\n50 and the max 200, then HISTOGRAM\\_FLOOR will have value 50, and the count is\r\nthe number of entires which were below this minimum value. The ceiling is the same\r\nbut visa versa. For bin values, the value is the minimum value of the bin, up to\r\nbut not including the next bin.\r\n\r\nTo enable the binary sink protocol, add a configuration variable `binary_stream`\r\nto the configuration file with the value `yes`. An example sink is provided in\r\n`sinks/binary_sink.py`.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}